signature ys_ drop_comm_prefix/0 comm_prefix/0 special_rev/0 drop_comm_suffix/0 split_comm_suffix/0 return_prefix/0 nil/0 x_ reverse/0 common_prefix/0 ret_comm_suffix/0 cons/0 ./2 rev/0 a_ b_ y_ z_ xs_;
assume 'library/lists/miscellaneous/ret_comm_prefix';
rev nil x_ = x_;
ret_comm_suffix xs_ ys_ = reverse (common_prefix (reverse xs_) (reverse ys_));
assume 'library/lists/miscellaneous/drop_common_suffix';
split_comm_suffix xs_ ys_ = cons (ret_comm_suffix xs_ ys_) (drop_comm_suffix xs_ ys_);

# split_comm_suffix takes in two lists and returns a cons pair whose first item is the lists' common suffix. The second item is another cons pair whose two items are the remainders of the two lists after their common suffixes are dropped.

# Example
# split_comm_suffix (cons 4 (cons 5 nil)) (cons 4 (cons 6 (cons 5 nil))) = cons (cons 5 nil) (cons (cons 4 nil) (cons 4 (cons 6 nil)))
