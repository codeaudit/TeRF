signature ./2 apply/0 until/0 nil/0 cons/0 check/0 true/0 concat/0 list/0 false/0 head/0 f1_ f2_ a_ x_ z_ y_ xs_ list1/0;
assume 'library/lists/selectors/head';
assume 'library/lists/constructors/list_items';
assume 'library/lists/miscellaneous/concat';
apply f1_ until f2_ a_ nil = nil;
check x_ nil z_ f1_ f2_ a_ = f1_ (list z_);
apply f1_ until f2_ a_ (cons x_ y_) = check (f2_ a_ x_) y_ x_ f1_ f2_ a_;
check true (cons x_ y_) z_ f1_ f2_ a_ = concat (f1_ (list z_)) (cons x_ y_);
check false (cons x_ y_) z_ f1_ f2_ a_ = check (f2_ a_ x_) y_ (z_ x_) f1_ f2_ a_;

# apply_until takes in two functions, 'f1_' and 'f2_ a_' (ex. equals? 3), and a list, and applies 'f1_' to the items in the list that precede the first item which returns true when evaluated by 'f2_ a_'. It returns a concatenated list in appropriate order of both the affected and unaffected items.

# Example
# apply reverse until equals 3 (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil))))) = cons 3 (cons 2 (cons 1 (cons 4 (cons 5 nil))))